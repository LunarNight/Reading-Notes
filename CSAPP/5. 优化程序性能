#优化程序性能  
 编写高效程序需要做以下几点：  
 1. 选择适当的算法和数据结构。  
 2. 理解优化编译器的能力和局限性是很重要的。  
  
 程序优化到达第一步是消除不必要的工作，让代码尽可能有效地执行所期望的任务。这包括消除不必要的函数调用,条件测试和内存引用.这些优化不依赖于目标机器的任何具体属性.现代计算机用复杂的技术来处理机器级程序,并行地执行许多指令,执行顺序还可能不同于它们在程序中出现的顺序.  
 了解了处理器的运作,就可以进行程序优化的第二步,利用处理器提供的指令级并行能力,同时执行多条指令.  
 性能可能依赖于处理器设计的许多细节特性,而对此我们所知甚少,也是为什么要尝试各种技术的变形和组合的另一个原因.  
 研究程序的汇编代码标示是理解编译器以及产生的代码会如何运行的最有效手段之一.可以预测什么操作会并行执行,以及如何使用处理器资源.常常通过确认关键路径来决定执行一个循环所需要的时间(或者说,是一个时间下界).所谓关键路径是在循环的反复执行过程中形成的数据相关链.  
##5.1优化编译器的能力和局限性  
 编译器必须很小心地对程序只是用**安全化**的优化,也就是说对于程序可能遇到的多有可能的情况,在C语言标准提供的保证之下,优化后和为优化的版本有一样的行为.  
```
void twiddle1(long *xp,long *yp)
{
	*xp+=*yp;
	*xp+=*yp;
}
void twiddle2(long *xp,long *yp)
{
	*xp+=2* *yp;
	
}
```
 在twiddle2中,两个指针指向同一个内存位置的情况称为**内存别名使用**.
 
 
 
